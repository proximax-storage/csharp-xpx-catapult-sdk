// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProximaX.Sirius.Chain.Sdk.Buffers
{

    using global::System;
    using global::System.Collections.Generic;
    using global::FlatBuffers;

    public struct MetadataAccountTransactionBuffer : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        //public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
        public static MetadataAccountTransactionBuffer GetRootAsMetadataAccountTransactionBuffer(ByteBuffer _bb) { return GetRootAsMetadataAccountTransactionBuffer(_bb, new MetadataAccountTransactionBuffer()); }
        public static MetadataAccountTransactionBuffer GetRootAsMetadataAccountTransactionBuffer(ByteBuffer _bb, MetadataAccountTransactionBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
        public MetadataAccountTransactionBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public uint Size { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public byte Signature(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
        public int SignatureLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSignatureBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
        public ArraySegment<byte>? GetSignatureBytes() { return __p.__vector_as_arraysegment(6); }
#endif
        public byte[] GetSignatureArray() { return __p.__vector_as_array<byte>(6); }
        public byte Signer(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
        public int SignerLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSignerBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
        public ArraySegment<byte>? GetSignerBytes() { return __p.__vector_as_arraysegment(8); }
#endif
        public byte[] GetSignerArray() { return __p.__vector_as_array<byte>(8); }
        public uint Version { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public ushort Type { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
        public uint MaxFee(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
        public int MaxFeeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetMaxFeeBytes() { return __p.__vector_as_span<uint>(14, 4); }
#else
        public ArraySegment<byte>? GetMaxFeeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
        public uint[] GetMaxFeeArray() { return __p.__vector_as_array<uint>(14); }
        public uint Deadline(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
        public int DeadlineLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetDeadlineBytes() { return __p.__vector_as_span<uint>(16, 4); }
#else
        public ArraySegment<byte>? GetDeadlineBytes() { return __p.__vector_as_arraysegment(16); }
#endif
        public uint[] GetDeadlineArray() { return __p.__vector_as_array<uint>(16); }
        public byte TargetKey(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
        public int TargetKeyLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetKeyBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
        public ArraySegment<byte>? GetTargetKeyBytes() { return __p.__vector_as_arraysegment(18); }
#endif
        public byte[] GetTargetKeyArray() { return __p.__vector_as_array<byte>(18); }
        public uint ScopedMetadataKey(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
        public int ScopedMetadataKeyLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetScopedMetadataKeyBytes() { return __p.__vector_as_span<uint>(20, 4); }
#else
        public ArraySegment<byte>? GetScopedMetadataKeyBytes() { return __p.__vector_as_arraysegment(20); }
#endif
        public uint[] GetScopedMetadataKeyArray() { return __p.__vector_as_array<uint>(20); }
        /// In case of address it is empty array. In case of mosaic or namespace id it is 8 byte array(or 2 uint32 array)
        public short ValueSizeDelta { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
        public ushort ValueSize { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
        public byte Value(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
        public int ValueLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
        public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(26); }
#endif
        public byte[] GetValueArray() { return __p.__vector_as_array<byte>(26); }

        public static Offset<MetadataAccountTransactionBuffer> CreateMetadataAccountTransactionBuffer(FlatBufferBuilder builder,
            uint size = 0,
            VectorOffset signatureOffset = default(VectorOffset),
            VectorOffset signerOffset = default(VectorOffset),
            uint version = 0,
            ushort type = 0,
            VectorOffset maxFeeOffset = default(VectorOffset),
            VectorOffset deadlineOffset = default(VectorOffset),
            VectorOffset targetKeyOffset = default(VectorOffset),
            VectorOffset scopedMetadataKeyOffset = default(VectorOffset),
            short valueSizeDelta = 0,
            ushort valueSize = 0,
            VectorOffset valueOffset = default(VectorOffset))
        {
            builder.StartObject(12);
            MetadataAccountTransactionBuffer.AddValue(builder, valueOffset);
            MetadataAccountTransactionBuffer.AddScopedMetadataKey(builder, scopedMetadataKeyOffset);
            MetadataAccountTransactionBuffer.AddTargetKey(builder, targetKeyOffset);
            MetadataAccountTransactionBuffer.AddDeadline(builder, deadlineOffset);
            MetadataAccountTransactionBuffer.AddMaxFee(builder, maxFeeOffset);
            MetadataAccountTransactionBuffer.AddVersion(builder, version);
            MetadataAccountTransactionBuffer.AddSigner(builder, signerOffset);
            MetadataAccountTransactionBuffer.AddSignature(builder, signatureOffset);
            MetadataAccountTransactionBuffer.AddSize(builder, size);
            MetadataAccountTransactionBuffer.AddValueSize(builder, valueSize);
            MetadataAccountTransactionBuffer.AddValueSizeDelta(builder, valueSizeDelta);
            MetadataAccountTransactionBuffer.AddType(builder, type);
            return MetadataAccountTransactionBuffer.EndMetadataAccountTransactionBuffer(builder);
        }

        public static void StartMetadataAccountTransactionBuffer(FlatBufferBuilder builder) { builder.StartObject(12); }
        public static void AddSize(FlatBufferBuilder builder, uint size) { builder.AddUint(0, size, 0); }
        public static void AddSignature(FlatBufferBuilder builder, VectorOffset signatureOffset) { builder.AddOffset(1, signatureOffset.Value, 0); }
        public static VectorOffset CreateSignatureVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateSignatureVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
        public static void StartSignatureVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
        public static void AddSigner(FlatBufferBuilder builder, VectorOffset signerOffset) { builder.AddOffset(2, signerOffset.Value, 0); }
        public static VectorOffset CreateSignerVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateSignerVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
        public static void StartSignerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
        public static void AddVersion(FlatBufferBuilder builder, uint version) { builder.AddUint(3, version, 0); }
        public static void AddType(FlatBufferBuilder builder, ushort type) { builder.AddUshort(4, type, 0); }
        public static void AddMaxFee(FlatBufferBuilder builder, VectorOffset maxFeeOffset) { builder.AddOffset(5, maxFeeOffset.Value, 0); }
        public static VectorOffset CreateMaxFeeVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateMaxFeeVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static void StartMaxFeeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddDeadline(FlatBufferBuilder builder, VectorOffset deadlineOffset) { builder.AddOffset(6, deadlineOffset.Value, 0); }
        public static VectorOffset CreateDeadlineVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateDeadlineVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static void StartDeadlineVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddTargetKey(FlatBufferBuilder builder, VectorOffset targetKeyOffset) { builder.AddOffset(7, targetKeyOffset.Value, 0); }
        public static VectorOffset CreateTargetKeyVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateTargetKeyVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
        public static void StartTargetKeyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
        public static void AddScopedMetadataKey(FlatBufferBuilder builder, VectorOffset scopedMetadataKeyOffset) { builder.AddOffset(8, scopedMetadataKeyOffset.Value, 0); }
        public static VectorOffset CreateScopedMetadataKeyVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateScopedMetadataKeyVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static void StartScopedMetadataKeyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddValueSizeDelta(FlatBufferBuilder builder, short valueSizeDelta) { builder.AddShort(9, valueSizeDelta, 0); }
        public static void AddValueSize(FlatBufferBuilder builder, ushort valueSize) { builder.AddUshort(10, valueSize, 0); }
        public static void AddValue(FlatBufferBuilder builder, VectorOffset valueOffset) { builder.AddOffset(11, valueOffset.Value, 0); }
        public static VectorOffset CreateValueVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
        public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
        public static Offset<MetadataAccountTransactionBuffer> EndMetadataAccountTransactionBuffer(FlatBufferBuilder builder)
        {
            int o = builder.EndObject();
            return new Offset<MetadataAccountTransactionBuffer>(o);
        }
        public static void FinishMetadataAccountTransactionBufferBuffer(FlatBufferBuilder builder, Offset<MetadataAccountTransactionBuffer> offset) { builder.Finish(offset.Value); }
        public static void FinishSizePrefixedMetadataAccountTransactionBufferBuffer(FlatBufferBuilder builder, Offset<MetadataAccountTransactionBuffer> offset) { builder.FinishSizePrefixed(offset.Value); }
    };


}
