// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProximaX.Sirius.Chain.Sdk.Buffers
{

using global::System;
using global::FlatBuffers;

public struct MosaicLevy : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
 // public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MosaicLevy GetRootAsMosaicLevy(ByteBuffer _bb) { return GetRootAsMosaicLevy(_bb, new MosaicLevy()); }
  public static MosaicLevy GetRootAsMosaicLevy(ByteBuffer _bb, MosaicLevy obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
        public MosaicLevy __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Type { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Recipient(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int RecipientLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecipientBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetRecipientBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetRecipientArray() { return __p.__vector_as_array<byte>(6); }
  public uint MosaicId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int MosaicIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetMosaicIdBytes() { return __p.__vector_as_span<uint>(8, 4); }
#else
  public ArraySegment<byte>? GetMosaicIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public uint[] GetMosaicIdArray() { return __p.__vector_as_array<uint>(8); }
  public uint Fee(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int FeeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetFeeBytes() { return __p.__vector_as_span<uint>(10, 4); }
#else
  public ArraySegment<byte>? GetFeeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public uint[] GetFeeArray() { return __p.__vector_as_array<uint>(10); }

  public static Offset<MosaicLevy> CreateMosaicLevy(FlatBufferBuilder builder,
      byte type = 0,
      VectorOffset recipientOffset = default(VectorOffset),
      VectorOffset mosaicIdOffset = default(VectorOffset),
      VectorOffset feeOffset = default(VectorOffset)) {
    builder.StartObject(4);
    MosaicLevy.AddFee(builder, feeOffset);
    MosaicLevy.AddMosaicId(builder, mosaicIdOffset);
    MosaicLevy.AddRecipient(builder, recipientOffset);
    MosaicLevy.AddType(builder, type);
    return MosaicLevy.EndMosaicLevy(builder);
  }

  public static void StartMosaicLevy(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddType(FlatBufferBuilder builder, byte type) { builder.AddByte(0, type, 0); }
  public static void AddRecipient(FlatBufferBuilder builder, VectorOffset recipientOffset) { builder.AddOffset(1, recipientOffset.Value, 0); }
  public static VectorOffset CreateRecipientVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRecipientVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartRecipientVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddMosaicId(FlatBufferBuilder builder, VectorOffset mosaicIdOffset) { builder.AddOffset(2, mosaicIdOffset.Value, 0); }
  public static VectorOffset CreateMosaicIdVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMosaicIdVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMosaicIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFee(FlatBufferBuilder builder, VectorOffset feeOffset) { builder.AddOffset(3, feeOffset.Value, 0); }
  public static VectorOffset CreateFeeVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFeeVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFeeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MosaicLevy> EndMosaicLevy(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MosaicLevy>(o);
  }
};


}
